#########################
# Sources for Troubleshooting:
# https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-device
# https://www.nitrokey.com/documentation/installation
#
#### step 1: ####
# Install OpenSC (version > 0.20)
# https://github.com/OpenSC/OpenSC/releases

#### step 2: ####
# label & plug in the key

#### step 3:####
# In this step, the Nitrokey will be initialized
# This step can be repeated to reset the Nitrokey!
# For the following steps, the pin, the so_pin and the label have to be set.
# - The pin allows access to the key and is prompted for when starting the software, 6 characters are recommended.
# - The so-pin is the master pin, which allows to alter the content of the key, which should very rarely happen
#   outside of the initialisation. One use case might be: To unblock the nitrokey if the wrong pin (the short one)
#   is entered several times
# - The label should be your project identifier (case sensitive!), so for example A01, BE04, SA13 etc


# < > indicate fields that have to be filled in!
# For Linux, run the following in the Terminal:
sc-hsm-tool --initialize --so-pin <so_pin> --pin <pin> --label <project_name>

# For Windows, run the following in the cmd window (sc-hsm-tool might also work!):
<path>\pkcs11-tool.exe --module <path>\opensc-pkcs11.so --init-token --init-pin --so-pin=<so_pin> --label=<project_name> --pin=<pin>

# The output should look something like this if done correctly:
# > Using reader with a card: Nitrokey Nitrokey HSM (DENK01044660000         ) 00 00

##### step 4 ####
# In this step the RSA keypair to encrypt and decrypt the pseudonymisation keys is generated
cd scripts/hwkey_setup
python generate_rsa_keypair.py --pin <pin>

#### step 5 ####
# In this step we generate the actual pseudonymisation key and save it to a .txt file.
# this must be saved at a protected place!
# Multiple sites can have the same pseudokey, for example if project "B03" has two locations each with their own key,
# both can be setup with the same projectkey to generate the same pseudonym
# IMPORTANT: the <name_projectkey> is also the name by which the Limesurvey surveys are filtered!


python create_pseudokey.py --projectkey <name_projectkey>
# the key file is generated: <name_projectkey>_pseudokey.txt


#### step 6 ####
# here we add the encrypted projectkey to the "handler" file, which is deployed with the software. Each user of ALIIAS
# will get the same handler file, so in the initial setup one line of characters will be added to the handler file per
# Nitrokey (i.e. 10 Nitrokeys = 10 lines in the handler.txt).
# Note that here we can choose a project name which is different to the project key. So for example two keys could
# use the same pseudonymisation key "B03", and their projects could be "B03-A" and "B03-B" (use '-' for separation!!!)
# for example!

python setup_extend_handler.py --p <project_name> --projectkey <project_key>
# the handler.txt is extended and should have an additional line which starts with <project_name>_...
# IMPORTANT: the <name_projectkey> is also the name by which the Limesurvey surveys are filtered, the
# <project_name> has NO influence on it!


#### step 7 ####
# output PseudoID/handler.txt
# then save and delete this: script/hwkey_setup/<project_name>_pseudokey.txt

# Now the key is added to the project (if ALIIAS runs with the right handler file)